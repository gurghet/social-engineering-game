name: E2E Setup

on:
  workflow_call:
    inputs:
      platform:
        description: 'Platform to build for'
        required: false
        type: string
        default: 'linux/amd64'
    secrets:
      OPENAI_API_KEY:
        required: true

jobs:
  setup-and-test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      DEBUG_MODE: true
      CI: true
      DOCKER_DEFAULT_PLATFORM: ${{ inputs.platform }}

    steps:
    - uses: actions/checkout@v3

    - name: Set up QEMU
      if: inputs.platform == 'linux/arm64'
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and run containers
      run: |
        docker compose -f docker-compose.ci.yml build
        docker compose -f docker-compose.ci.yml up -d

    - name: Wait for services to be ready
      run: |
        echo "Waiting for containers to start..."
        docker ps
        
        echo "Giving containers time to initialize..."
        sleep 10
        
        echo "Checking frontend health..."
        ATTEMPT=1
        MAX_ATTEMPTS=12
        until $(curl --output /dev/null --silent --fail http://localhost/health) || [ $ATTEMPT -eq $MAX_ATTEMPTS ]; do
          echo "Attempt $ATTEMPT of $MAX_ATTEMPTS: Frontend not ready yet..."
          echo "Container logs:"
          docker compose -f docker-compose.ci.yml logs --tail 50
          echo "Nginx configuration:"
          docker compose -f docker-compose.ci.yml exec frontend cat /etc/nginx/conf.d/default.conf
          echo "Directory contents:"
          docker compose -f docker-compose.ci.yml exec frontend ls -la /usr/share/nginx/html
          sleep 5
          ATTEMPT=$(($ATTEMPT + 1))
        done
        
        if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
          echo "Frontend failed to become ready. Showing all logs:"
          docker compose -f docker-compose.ci.yml logs
          exit 1
        fi
        
        echo "Frontend is ready!"
        echo "Checking backend connectivity..."
        curl -v http://localhost:23925/api/prompt || true  # Don't fail if backend check fails

    - name: Run Playwright tests
      run: |
        cd e2e
        npm ci
        npx playwright install --with-deps chromium
        PLAYWRIGHT_TEST_BASE_URL=http://localhost npm test

    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: e2e/playwright-report/
        retention-days: 30

    - name: Stop containers
      if: always()
      run: docker compose -f docker-compose.ci.yml down --remove-orphans

    - name: Remove images
      if: always()
      run: |
        # Remove local images
        docker image rm -f $(docker images 'social-engineering-game-*' -q) || true
        # Remove registry images
        docker image rm -f $(docker images 'ghcr.io/gurghet/social-engineering-game-*' -q) || true
